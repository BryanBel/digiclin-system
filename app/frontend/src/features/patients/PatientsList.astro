
---
---

<ul id="patients-list" class="m-0 p-0 list-none overflow-auto rounded-md border border-gray-300 h-full divide-y divide-gray-200 dark:divide-gray-700" bg-color="blue-500" dark:bg-gray-800>
  <li id="loading-state" class="text-gray-500 p-4 text-center">
    Cargando pacientes...
  </li>
</ul>

<script>
  import PatientsModule, { patients } from "./patientsModule";

  const patientsList = document.querySelector('#patients-list');

  try {
    // consigue la lista inicial de pacientes y elimina el estado de carga (suscripcion)
    await PatientsModule.getPatients();
  } catch (error) {
    // mensaje de error
    console.error("Failed to fetch patients:", error);
    if (patientsList) patientsList.innerHTML = `<li class="text-red-500 p-4 text-center">Error al cargar los pacientes.</li>`;
  }

  // suscribe a los cambios en la lista de pacientes
  const unsubscribe = patients.subscribe(allPatients => {
    if (!patientsList) return;

    const fragment = document.createDocumentFragment();

    if (allPatients.length === 0) {
        const noPatientsLi = document.createElement('li');
        noPatientsLi.textContent = 'No se encontraron pacientes.';
        noPatientsLi.className = 'text-gray-500 p-4';
        fragment.appendChild(noPatientsLi);
    } else {
      // renderiza la lista de pacientes
      for (const patient of allPatients) {
        const li = document.createElement('li');
        const link = document.createElement('a');
        const nameSpan = document.createElement('span');

        link.href = `/patients/${patient.id}`;
        link.className = 'block p-4 flex justify-between items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-150';

        nameSpan.className = 'patient-name font-medium text-gray-800 dark:text-gray-200';
        nameSpan.textContent = patient.name;

        const deleteButton = document.createElement('button');
        deleteButton.innerHTML = '&#10005;'; // A simple 'X' icon
        deleteButton.className = 'delete-patient-btn text-red-500 hover:text-red-700 text-lg font-bold p-2 rounded-full w-8 h-8 flex items-center justify-center hover:bg-red-100 transition-colors duration-150';
        deleteButton.title = `Eliminar a ${patient.name}`;
        deleteButton.dataset.patientId = patient.id;

        link.appendChild(nameSpan);
        link.appendChild(deleteButton);
        li.appendChild(link);
        fragment.appendChild(li);
      }
    }
    patientsList.replaceChildren(fragment);
  });

  // usa el eventlistener para manejar clicks en botones de borrar
  if (patientsList) {
    patientsList.addEventListener('click', async (event) => {
      const target = event.target.closest('.delete-patient-btn');

      if (target) {
        event.preventDefault();
        event.stopPropagation();

        const patientId = target.dataset.patientId;
        const patientName = target.closest('a').querySelector('.patient-name')?.textContent || 'este paciente';

        if (patientId && window.confirm(`¿Estás seguro de que quieres eliminar a ${patientName}?`)) {
          try {
            target.disabled = true;
            await PatientsModule.removePatient(patientId);
            // la lista se actualizará automáticamente por la suscripción no es necesario hacer nada más
          } catch (error) {
            target.disabled = false;
          }
        }
      }
    });
  }

  // lmpide la suscripción cuando el componente se desmonta
  document.addEventListener('astro:before-swap', unsubscribe, { once: true });
</script>
