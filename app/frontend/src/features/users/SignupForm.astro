---
// Signup form component
---
<div class="w-full max-w-md p-4 md:px-8 space-y-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h1 class="text-2xl font-bold text-center text-gray-900 dark:text-white">Crea tu cuenta</h1>

  <form id="signup-form" class="space-y-6" novalidate>
    <div>
      <label for="email" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">Correo</label>
      <input type="email" id="email" name="email" placeholder="tu.email@ejemplo.com" class="w-full px-4 py-2 text-gray-900 bg-gray-50 border rounded-lg focus:ring-blue-500 focus:outline-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white transition-colors duration-200" />
      <p id="email-helper" class="mt-2 text-xs text-gray-500 dark:text-gray-400">Por favor ingresa un direccion de correo valida.</p>
    </div>
    <div>
      <label for="password" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">Contraseña</label>
      <input type="password" id="password" name="password" placeholder="••••••••" class="w-full px-4 py-2 text-gray-900 bg-gray-50 border rounded-lg focus:ring-blue-500 focus:outline-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white transition-colors duration-200" />
      <p id="password-helper" class="mt-2 text-xs text-gray-500 dark:text-gray-400">Debe tener al menos 6 caracteres e incluir una letra, un número y un carácter especial (!@#$%^&*).</p>
    </div>
    <div>
      <label for="verify-password" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">Verificar contraseña</label>
      <input type="password" id="verify-password" name="verify-password" placeholder="••••••••" class="w-full px-4 py-2 text-gray-900 bg-gray-50 border rounded-lg focus:ring-blue-500 focus:outline-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white transition-colors duration-200" />
      <p id="verify-password-helper" class="mt-2 text-xs text-gray-500 dark:text-gray-400">La contraseña tiene que coincidir.</p>
    </div>
    <button type="submit" id="submit-button" disabled class="w-full px-5 py-3 text-base font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 disabled:bg-gray-400 disabled:cursor-not-allowed dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 dark:disabled:bg-gray-600 transition-colors duration-200">
      Registrar
    </button>
  </form>
</div>

<script>
  import UsersModule from './usersModule.js';

  const form = document.querySelector('#signup-form');
  const emailInput = document.querySelector('#email');
  const passwordInput = document.querySelector('#password');
  const verifyPasswordInput = document.querySelector('#verify-password');
  const submitButton = document.querySelector('#submit-button');
  const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{6,}$/;
  const validationState = { isEmailValid: false, isPasswordValid: false, doPasswordsMatch: false };

  function updateInputValidationUI(inputElement, isValid) {
    if (isValid) {
      inputElement.classList.remove('border-red-500', 'dark:border-red-500');
      inputElement.classList.add('border-green-500', 'dark:border-green-500');
    } else {
      inputElement.classList.remove('border-green-500', 'dark:border-green-500');
      inputElement.classList.add('border-red-500', 'dark:border-red-500');
    }
    if (inputElement.value === '') {
      inputElement.classList.remove('border-red-500', 'dark:border-red-500', 'border-green-500', 'dark:border-green-500');
    }
  }

  function validateForm() {
    const { isEmailValid, isPasswordValid, doPasswordsMatch } = validationState;
    submitButton.disabled = !isEmailValid || !isPasswordValid || !doPasswordsMatch;
  }

  emailInput.addEventListener('input', () => {
    const isValid = emailRegex.test(emailInput.value);
    validationState.isEmailValid = isValid;
    updateInputValidationUI(emailInput, isValid);
    validateForm();
  });

  passwordInput.addEventListener('input', () => {
    const isValid = passwordRegex.test(passwordInput.value);
    validationState.isPasswordValid = isValid;
    updateInputValidationUI(passwordInput, isValid);
    const passwordsMatch = passwordInput.value === verifyPasswordInput.value && verifyPasswordInput.value.length > 0;
    validationState.doPasswordsMatch = passwordsMatch;
    updateInputValidationUI(verifyPasswordInput, passwordsMatch);
    validateForm();
  });

  verifyPasswordInput.addEventListener('input', () => {
    const isValid = passwordInput.value === verifyPasswordInput.value && verifyPasswordInput.value.length > 0;
    validationState.doPasswordsMatch = isValid;
    updateInputValidationUI(verifyPasswordInput, isValid);
    validateForm();
  });

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const { isEmailValid, isPasswordValid, doPasswordsMatch } = validationState;
    if (!isEmailValid || !isPasswordValid || !doPasswordsMatch) return;

    const result = await UsersModule.signup({ email: emailInput.value, password: passwordInput.value });

    if (result.success) {
      for (const key in validationState) {
        validationState[key] = false;
      }
      form.reset();
      [emailInput, passwordInput, verifyPasswordInput].forEach(input => {
        input.classList.remove('border-red-500', 'dark:border-red-500', 'border-green-500', 'dark:border-green-500');
      });
      validateForm();
    }
  });
</script>
